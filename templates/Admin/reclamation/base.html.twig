<!doctype html>

<html
  lang="en"
  class="layout-menu-fixed layout-compact"
  data-assets-path="{{asset('../assets/')}}"
  data-template="vertical-menu-template-free">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />

    <title>Demo: Account settings - Account | Sneat - Bootstrap Dashboard FREE</title>

    <meta name="description" content="" />

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="{{asset('../backofficee/assets/img/favicon/favicon.ico')}}" />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap"
      rel="stylesheet" />

    <link rel="stylesheet" href="{{asset('/assets/vendor/fonts/iconify-icons.css')}}" />

    <!-- Core CSS -->
    <link rel="stylesheet" href="{{asset('/backofficee/assets/vendor/css/core.css')}}" />
    <link rel="stylesheet" href="{{asset('/backofficee/assets/css/demo.css')}}" />

    <!-- Vendors CSS -->
    <link rel="stylesheet" href="{{asset('/backofficee/assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.css')}}" />

    <!-- Page CSS -->

    <!-- Helpers -->
    <script src="{{asset('/backofficee/assets/vendor/js/helpers.js')}}"></script>
    <script src="{{asset('/backofficee/assets/js/config.js')}}"></script>

    <!-- Add SweetAlert2 in the head section, after other CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@sweetalert2/theme-bootstrap-4/bootstrap-4.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        /* Simple slide animation styles */
        .content-wrapper {
            position: relative;
            overflow: hidden;
        }

        .slide-container {
            transition: transform 0.3s ease-in-out;
        }

        .slide-left {
            transform: translateX(-100%);
        }

        .slide-right {
            transform: translateX(0);
        }

        /* Fix modal flashing */
        .modal {
            animation: none !important;
            -webkit-animation: none !important;
            -moz-animation: none !important;
            -o-animation: none !important;
            -ms-animation: none !important;
            backdrop-filter: none !important;
        }

        .modal-backdrop {
            animation: none !important;
            -webkit-animation: none !important;
            -moz-animation: none !important;
            -o-animation: none !important;
            -ms-animation: none !important;
        }

        .modal.fade .modal-dialog {
            transition: transform 0.2s ease-out !important;
            transform: translate(0, 0) !important;
        }
    </style>
  </head>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
        <aside id="layout-menu" class="layout-menu menu-vertical menu bg-menu-theme">
          <div class="app-brand demo">
            <a href="index.html" class="app-brand-link">
              <span class="app-brand-logo demo">
                <span class="text-primary">
                  <svg
                    width="25"
                    viewBox="0 0 25 42"
                    version="1.1"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink">
                    <defs>
                      <path
                        d="M13.7918663,0.358365126 L3.39788168,7.44174259 C0.566865006,9.69408886 -0.379795268,12.4788597 0.557900856,15.7960551 C0.68998853,16.2305145 1.09562888,17.7872135 3.12357076,19.2293357 C3.8146334,19.7207684 5.32369333,20.3834223 7.65075054,21.2172976 L7.59773219,21.2525164 L2.63468769,24.5493413 C0.445452254,26.3002124 0.0884951797,28.5083815 1.56381646,31.1738486 C2.83770406,32.8170431 5.20850219,33.2640127 7.09180128,32.5391577 C8.347334,32.0559211 11.4559176,30.0011079 16.4175519,26.3747182 C18.0338572,24.4997857 18.6973423,22.4544883 18.4080071,20.2388261 C17.963753,17.5346866 16.1776345,15.5799961 13.0496516,14.3747546 L10.9194936,13.4715819 L18.6192054,7.984237 L13.7918663,0.358365126 Z"
                        id="path-1"></path>
                      <path
                        d="M5.47320593,6.00457225 C4.05321814,8.216144 4.36334763,10.0722806 6.40359441,11.5729822 C8.61520715,12.571656 10.0999176,13.2171421 10.8577257,13.5094407 L15.5088241,14.433041 L18.6192054,7.984237 C15.5364148,3.11535317 13.9273018,0.573395879 13.7918663,0.358365126 C13.5790555,0.511491653 10.8061687,2.3935607 5.47320593,6.00457225 Z"
                        id="path-3"></path>
                      <path
                        d="M7.50063644,21.2294429 L12.3234468,23.3159332 C14.1688022,24.7579751 14.397098,26.4880487 13.008334,28.506154 C11.6195701,30.5242593 10.3099883,31.790241 9.07958868,32.3040991 C5.78142938,33.4346997 4.13234973,34 4.13234973,34 C4.13234973,34 2.75489982,33.0538207 2.37032616e-14,31.1614621 C-0.55822714,27.8186216 -0.55822714,26.0572515 -4.05231404e-15,25.8773518 C0.83734071,25.6075023 2.77988457,22.8248993 3.3049379,22.52991 C3.65497346,22.3332504 5.05353963,21.8997614 7.50063644,21.2294429 Z"
                        id="path-4"></path>
                      <path
                        d="M20.6,7.13333333 L25.6,13.8 C26.2627417,14.6836556 26.0836556,15.9372583 25.2,16.6 C24.8538077,16.8596443 24.4327404,17 24,17 L14,17 C12.8954305,17 12,16.1045695 12,15 C12,14.5672596 12.1403557,14.1461923 12.4,13.8 L17.4,7.13333333 C18.0627417,6.24967773 19.3163444,6.07059163 20.2,6.73333333 C20.3516113,6.84704183 20.4862915,6.981722 20.6,7.13333333 Z"
                        id="path-5"></path>
                    </defs>
                    <g id="g-app-brand" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                      <g id="Brand-Logo" transform="translate(-27.000000, -15.000000)">
                        <g id="Icon" transform="translate(27.000000, 15.000000)">
                          <g id="Mask" transform="translate(0.000000, 8.000000)">
                            <mask id="mask-2" fill="white">
                              <use xlink:href="#path-1"></use>
                            </mask>
                            <use fill="currentColor" xlink:href="#path-1"></use>
                            <g id="Path-3" mask="url(#mask-2)">
                              <use fill="currentColor" xlink:href="#path-3"></use>
                              <use fill-opacity="0.2" fill="#FFFFFF" xlink:href="#path-3"></use>
                            </g>
                            <g id="Path-4" mask="url(#mask-2)">
                              <use fill="currentColor" xlink:href="#path-4"></use>
                              <use fill-opacity="0.2" fill="#FFFFFF" xlink:href="#path-4"></use>
                            </g>
                          </g>
                          <g
                            id="Triangle"
                            transform="translate(19.000000, 11.000000) rotate(-300.000000) translate(-19.000000, -11.000000) ">
                            <use fill="currentColor" xlink:href="#path-5"></use>
                            <use fill-opacity="0.2" fill="#FFFFFF" xlink:href="#path-5"></use>
                          </g>
                        </g>
                      </g>
                    </g>
                  </svg>
                </span>
              </span>
              <span class="app-brand-text demo menu-text fw-bold ms-2">Sneat</span>
            </a>

            <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large ms-auto">
              <i class="bx bx-chevron-left d-block d-xl-none align-middle"></i>
            </a>
          </div>

          <div class="menu-divider mt-0"></div>

          <div class="menu-inner-shadow"></div>

          <ul class="menu-inner py-1">
            <!-- Dashboards -->
            

            

            

          
            <!-- Pages -->
            <li class="menu-item active open">
              <a href="javascript:void(0);" class="menu-link menu-toggle">
                <i class="menu-icon tf-icons bx bx-dock-top"></i>
                <div class="text-truncate" data-i18n="Account Settings">Managment</div>
              </a>
              <ul class="menu-sub">
               
                <li class="menu-item">
                  <a href="{{path('admin_reclamation_index')}}" class="menu-link">
                    <div class="text-truncate" data-i18n="reclamation">RÃ©clamations</div>
                  </a>
                </li
              </ul>
            </li>
            
          </ul>
        </aside>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->

          <nav
            class="layout-navbar container-xxl navbar-detached navbar navbar-expand-xl align-items-center bg-navbar-theme"
            id="layout-navbar">
            <div class="layout-menu-toggle navbar-nav align-items-xl-center me-4 me-xl-0 d-xl-none">
              <a class="nav-item nav-link px-0 me-xl-6" href="javascript:void(0)">
                <i class="icon-base bx bx-menu icon-md"></i>
              </a>
            </div>

            <div class="navbar-nav-right d-flex align-items-center justify-content-end" id="navbar-collapse">
              <!-- Search -->
              <div class="navbar-nav align-items-center me-auto">
                <div class="nav-item d-flex align-items-center">
                  <span class="w-px-22 h-px-22"><i class="icon-base bx bx-search icon-md"></i></span>
                  <input
                    type="text"
                    class="form-control border-0 shadow-none ps-1 ps-sm-2 d-md-block d-none"
                    placeholder="Search..."
                    aria-label="Search..." />
                </div>
              </div>
              <!-- /Search -->

              <ul class="navbar-nav flex-row align-items-center ms-md-auto">
                <!-- Place this tag where you want the button to render. -->
                <li class="nav-item lh-1 me-4">
                  
                </li>

                <!-- User -->
                <li class="nav-item navbar-dropdown dropdown-user dropdown">
                  <a
                    class="nav-link dropdown-toggle hide-arrow p-0"
                    href="javascript:void(0);"
                    data-bs-toggle="dropdown">
                    <div class="avatar avatar-online">
                      <img src="{{asset('../assets/img/avatars/1.png')}}" alt class="w-px-40 h-auto rounded-circle" />
                    </div>
                  </a>
                  <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                      <a class="dropdown-item" href="#">
                        <div class="d-flex">
                          <div class="flex-shrink-0 me-3">
                            <div class="avatar avatar-online">
                              <img src="{{asset('../assets/img/avatars/1.png')}}" alt class="w-px-40 h-auto rounded-circle" />
                            </div>
                          </div>
                          <div class="flex-grow-1">
                            <h6 class="mb-0">John Doe</h6>
                            <small class="text-body-secondary">Admin</small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <div class="dropdown-divider my-1"></div>
                    </li>
                    <li>
                      <a class="dropdown-item" href="#">
                        <i class="icon-base bx bx-user icon-md me-3"></i><span>My Profile</span>
                      </a>
                    </li>
                    <li>
                      <a class="dropdown-item" href="#">
                        <i class="icon-base bx bx-cog icon-md me-3"></i><span>Settings</span>
                      </a>
                    </li>
                    <li>
                      <a class="dropdown-item" href="#">
                        <span class="d-flex align-items-center align-middle">
                          <i class="flex-shrink-0 icon-base bx bx-credit-card icon-md me-3"></i
                          ><span class="flex-grow-1 align-middle">Billing Plan</span>
                          <span class="flex-shrink-0 badge rounded-pill bg-danger">4</span>
                        </span>
                      </a>
                    </li>
                    <li>
                      <div class="dropdown-divider my-1"></div>
                    </li>
                    <li>
                      <a class="dropdown-item" href="javascript:void(0);">
                        <i class="icon-base bx bx-power-off icon-md me-3"></i><span>Log Out</span>
                      </a>
                    </li>
                  </ul>
                </li>
                <!--/ User -->
              </ul>
            </div>
          </nav>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="row">
                <div class="col-md-12">
                  <div class="nav-align-top">
                    <ul class="nav nav-pills flex-column flex-md-row mb-6 gap-md-0 gap-2">
                      <li class="nav-item">
                        <a class="nav-link {% if app.request.attributes.get('_route') == 'admin_reclamation_index' %}active{% endif %}" 
                           href="{{ path('admin_reclamation_index') }}"
                           data-page="reclamations">
                          <i class="icon-base bx bx-user icon-sm me-1_5"></i> Reclamations
                        </a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link {% if app.request.attributes.get('_route') == 'admin_reclamation_statistics' %}active{% endif %}" 
                           href="{{ path('admin_reclamation_statistics') }}"
                           data-page="statistics">
                          <i class="icon-base bx bx-bell icon-sm me-1_5"></i> Statistics
                        </a>
                      </li>
                    </ul>
                  </div>
                  <div class="card mb-6">
                    <div class="card-body">
                      {% block body %}{% endblock %}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
            <footer class="content-footer footer bg-footer-theme">
              <div class="container-xxl">
                <div
                  class="footer-container d-flex align-items-center justify-content-between py-4 flex-md-row flex-column">
                  <div class="mb-2 mb-md-0">
                    &#169;
                    <script>
                      document.write(new Date().getFullYear());
                    </script>
                    , made with â¤ï¸ by
                    <a href="https://themeselection.com" target="_blank" class="footer-link">ThemeSelection</a>
                  </div>
                  <div class="d-none d-lg-inline-block">
                    <a
                      href="https://themeselection.com/item/category/admin-templates/"
                      target="_blank"
                      class="footer-link me-4"
                      >Admin Templates</a
                    >

                    <a href="https://themeselection.com/license/" class="footer-link me-4" target="_blank">License</a>
                    <a
                      href="https://themeselection.com/item/category/bootstrap-admin-templates/"
                      target="_blank"
                      class="footer-link me-4"
                      >Bootstrap Dashboard</a
                    >

                    <a
                      href="https://demos.themeselection.com/sneat-bootstrap-html-admin-template/documentation/"
                      target="_blank"
                      class="footer-link me-4"
                      >Documentation</a
                    >

                    <a
                      href="https://github.com/themeselection/sneat-bootstrap-html-admin-template-free/issues"
                      target="_blank"
                      class="footer-link"
                      >Support</a
                    >
                  </div>
                </div>
              </div>
            </footer>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>
    </div>
    <!-- / Layout wrapper -->

    <!-- Core JS -->
    <script src="{{asset('/backofficee/assets/vendor/libs/jquery/jquery.js')}}"></script>
    <script src="{{asset('/backofficee/assets/vendor/libs/popper/popper.js')}}"></script>
    <script src="{{asset('/backofficee/assets/vendor/js/bootstrap.js')}}"></script>
    <script src="{{asset('/backofficee/assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.js')}}"></script>
    <script src="{{asset('/backofficee/assets/vendor/js/menu.js')}}"></script>
    <script src="{{asset('/backofficee/assets/js/main.js')}}"></script>
    <script src="{{asset('/backofficee/assets/js/pages-account-settings-account.js')}}"></script>
    <script async defer src="https://buttons.github.io/buttons.js"></script>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize variables
        const itemsPerPage = 10;
        let currentPage = 1;
        let filteredReclamations = [];
        
        // Get DOM elements
        const prevButton = document.getElementById('prev-page');
        const nextButton = document.getElementById('next-page');
        const showingCount = document.getElementById('showing-count');
        const allReclamations = Array.from(document.querySelectorAll('.reclamation-row'));
        const allDescRows = Array.from(document.querySelectorAll('.collapse'));
        
        // Get filter elements
        const dateFilter = document.getElementById('dateFilter');
        const typeFilter = document.getElementById('typeFilter');
        const statusFilter = document.getElementById('statusFilter');
        const priorityFilter = document.getElementById('priorityFilter');
        const searchFilter = document.getElementById('searchFilter');

        // Handle page navigation
        function handleNavigation(targetPage) {
            const slideContainer = document.querySelector('.slide-container');
            if (!slideContainer) return;

            if (targetPage > currentPage) {
                // Sliding left
                slideContainer.classList.add('slide-left');
                setTimeout(() => {
                    currentPage = targetPage;
                    updatePagination();
                    slideContainer.classList.remove('slide-left');
                }, 300);
            } else {
                // Sliding right
                slideContainer.classList.add('slide-right');
                setTimeout(() => {
                    currentPage = targetPage;
                    updatePagination();
                    slideContainer.classList.remove('slide-right');
                }, 300);
            }
        }

        // Define filter function
        function applyFilters() {
            console.log('Applying filters...'); // Debug log
            const dateValue = dateFilter?.value || 'all';
            const typeValue = typeFilter?.value || 'all';
            const statusValue = statusFilter?.value || 'all';
            const priorityValue = (priorityFilter?.value || 'all').toLowerCase();
            const searchValue = (searchFilter?.value || '').toLowerCase();

            filteredReclamations = allReclamations.filter(row => {
                let show = true;
                const rowText = row.textContent.toLowerCase();
                const rowState = row.dataset.state;
                const rowDateStr = row.querySelector('td:nth-child(4)')?.textContent;
                const rowType = row.querySelector('td:nth-child(3)')?.textContent;
                const rowPriority = row.querySelector('td:nth-child(7)')?.textContent.toLowerCase().trim();

                // Apply date filter
                if (show && dateValue !== 'all' && rowDateStr) {
                    const [year, month, day] = rowDateStr.split('-').map(Number);
                    const rowDate = new Date(year, month - 1, day);
                    const now = new Date();
                    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());

                    switch(dateValue) {
                        case 'today':
                            show = rowDate.getFullYear() === today.getFullYear() &&
                                   rowDate.getMonth() === today.getMonth() &&
                                   rowDate.getDate() === today.getDate();
                            break;
                        case 'week':
                            const weekStart = new Date(today);
                            weekStart.setDate(today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1));
                            const weekEnd = new Date(weekStart);
                            weekEnd.setDate(weekStart.getDate() + 6);
                            show = rowDate >= weekStart && rowDate <= weekEnd;
                            break;
                        case 'month':
                            show = rowDate.getMonth() === today.getMonth() && 
                                   rowDate.getFullYear() === today.getFullYear();
                            break;
                        case 'year':
                            show = rowDate.getFullYear() === today.getFullYear();
                            break;
                    }
                }

                // Apply status filter
                if (show && statusValue !== 'all') {
                    if (statusValue === 'pending' && rowState === 'resolved') show = false;
                    if (statusValue === 'resolved' && rowState === 'pending') show = false;
                }

                // Apply type filter
                if (show && typeValue !== 'all' && rowType !== typeValue) show = false;

                // Apply priority filter
                if (show && priorityValue !== 'all' && rowPriority !== priorityValue) show = false;

                // Apply search filter
                if (show && searchValue && !rowText.includes(searchValue)) show = false;

                return show;
            });

            currentPage = 1;
            updatePagination();
        }

        // Function to handle state toggle with SweetAlert2
        function handleStateToggle(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const button = e.currentTarget;
            const reclamationId = button.getAttribute('data-id');
            const isCurrentlyResolved = button.classList.contains('unmark-resolved-btn');
            
            Swal.fire({
                title: isCurrentlyResolved ? 'Confirm Unmark Action' : 'Confirm Resolution',
                text: isCurrentlyResolved ? 
                    'Are you sure you want to mark this reclamation as pending?' : 
                    'Are you sure you want to mark this reclamation as resolved?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: isCurrentlyResolved ? '#ffc107' : '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: isCurrentlyResolved ? 
                    '<i class="bi bi-x-circle-fill"></i> Unmark as Resolved' : 
                    '<i class="bi bi-check-circle-fill"></i> Mark as Resolved',
                cancelButtonText: 'Cancel',
                focusConfirm: true,
                customClass: {
                    confirmButton: isCurrentlyResolved ? 'btn btn-warning' : 'btn btn-success',
                    cancelButton: 'btn btn-secondary'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const url = `/admin/reclamations/${reclamationId}/toggle-state`;
                    
                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            const row = button.closest('tr');
                            const stateCell = row.querySelector('td:nth-child(5)');
                            const stateBadge = stateCell.querySelector('.badge');
                            
                            if (data.newState) {
                                // Change to Unmark button (yellow)
                                button.classList.remove('mark-resolved-btn', 'btn-success');
                                button.classList.add('unmark-resolved-btn', 'btn-warning');
                                button.innerHTML = '<i class="bi bi-x-circle-fill me-1"></i> Unmark';
                                stateBadge.textContent = 'Resolved';
                                stateBadge.classList.remove('bg-warning');
                                stateBadge.classList.add('bg-success');
                                row.dataset.state = 'resolved';
                            } else {
                                // Change to Mark button (green)
                                button.classList.remove('unmark-resolved-btn', 'btn-warning');
                                button.classList.add('mark-resolved-btn', 'btn-success');
                                button.innerHTML = '<i class="bi bi-check-circle-fill me-1"></i> Mark Resolved';
                                stateBadge.textContent = 'Pending';
                                stateBadge.classList.remove('bg-success');
                                stateBadge.classList.add('bg-warning');
                                row.dataset.state = 'pending';
                            }
                            
                            // Show success message
                            Swal.fire({
                                title: 'Success!',
                                text: data.newState ? 'Reclamation marked as resolved' : 'Reclamation marked as pending',
                                icon: 'success',
                                timer: 1500,
                                showConfirmButton: false
                            });
                            
                            // Reapply filters after state change
                            applyFilters();
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to update reclamation state: ' + data.message,
                                icon: 'error'
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Error updating reclamation state: ' + error.message,
                            icon: 'error'
                        });
                    });
                }
            });
        }

        // Function to attach button listeners
        function attachButtonListeners() {
            const buttons = document.querySelectorAll('.mark-resolved-btn, .unmark-resolved-btn');
            buttons.forEach(button => {
                button.removeEventListener('click', handleStateToggle);
                button.addEventListener('click', handleStateToggle);
            });
        }

        function updatePagination() {
            const totalItems = filteredReclamations.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            
            const start = (currentPage - 1) * itemsPerPage + 1;
            const end = Math.min(currentPage * itemsPerPage, totalItems);
            
            if (showingCount) {
                showingCount.textContent = `${start}-${end} of ${totalItems}`;
            }
            
            if (prevButton) prevButton.disabled = currentPage === 1;
            if (nextButton) nextButton.disabled = currentPage === totalPages;
            
            // Hide all rows first
            allReclamations.forEach(row => row.style.display = 'none');
            allDescRows.forEach(row => row.style.display = 'none');
            
            // Show only filtered rows for current page
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
            
            for (let i = startIndex; i < endIndex; i++) {
                if (filteredReclamations[i]) {
                    filteredReclamations[i].style.display = '';
                    const descRow = document.getElementById(`desc-${filteredReclamations[i].querySelector('td').textContent}`);
                    if (descRow) {
                        descRow.style.display = '';
                    }
                }
            }

            // After updating pagination, reattach button listeners
            attachButtonListeners();
        }

        // Add event listeners for pagination
        if (prevButton) {
            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    handleNavigation(currentPage - 1);
                }
            });
        }

        if (nextButton) {
            nextButton.addEventListener('click', () => {
                if (currentPage < Math.ceil(filteredReclamations.length / itemsPerPage)) {
                    handleNavigation(currentPage + 1);
                }
            });
        }

        // Add filter event listeners
        [dateFilter, typeFilter, statusFilter, priorityFilter].forEach(filter => {
            if (filter) filter.addEventListener('change', applyFilters);
        });
        if (searchFilter) searchFilter.addEventListener('input', applyFilters);

        // Initial setup
        filteredReclamations = allReclamations;
        updatePagination();
        attachButtonListeners();
    });
    </script>

    <!-- Add this right before the table -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="pagination d-flex align-items-center">
            <button id="prev-page" class="btn btn-sm btn-outline-primary me-2">
                <i class="bi bi-chevron-left"></i> Previous
            </button>
            <span id="showing-count" class="text-muted small">0-0 of 0</span>
            <button id="next-page" class="btn btn-sm btn-outline-primary ms-2">
                Next <i class="bi bi-chevron-right"></i>
            </button>
        </div>
    </div>
    <div class="slide-container">
        <!-- Your existing table goes here -->
    </div>

    {% block javascripts %}
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Pagination variables
        let itemsPerPage = 10;
        let currentPage = 1;
        let filteredReclamations = [];
        let isAnimating = false;

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing...');
            
            // Get all reclamation rows
            const rows = document.querySelectorAll('.reclamation-row');
            filteredReclamations = Array.from(rows);
            
            // Initialize pagination
            updatePagination();
            
            // Add event listeners for filters
            document.getElementById('dateFilter')?.addEventListener('change', applyFilters);
            document.getElementById('typeFilter')?.addEventListener('change', applyFilters);
            document.getElementById('statusFilter')?.addEventListener('change', applyFilters);
            document.getElementById('priorityFilter')?.addEventListener('change', applyFilters);
            document.getElementById('searchFilter')?.addEventListener('input', applyFilters);
            
            // Add event listeners for pagination
            document.getElementById('prev-page')?.addEventListener('click', () => handleNavigation('prev'));
            document.getElementById('next-page')?.addEventListener('click', () => handleNavigation('next'));
            
            // Add event listeners for resolve/unresolve buttons
            document.querySelectorAll('.mark-resolved-btn, .unmark-resolved-btn').forEach(button => {
                button.addEventListener('click', handleStateToggle);
            });

            console.log('Initialization complete');
        });

        // Handle pagination navigation with slide animation
        function handleNavigation(direction) {
            if (isAnimating) return;
            
            const container = document.querySelector('.slide-container');
            const tableBody = document.getElementById('reclamations-table-body');
            
            // Calculate new page
            const totalPages = Math.ceil(filteredReclamations.length / itemsPerPage);
            const newPage = direction === 'prev' ? currentPage - 1 : currentPage + 1;
            
            if (newPage < 1 || newPage > totalPages) return;
            
            isAnimating = true;
            
            // Prepare animation
            const currentLeft = 0;
            const targetLeft = direction === 'prev' ? 100 : -100;
            
            // Add transition class
            container.style.transition = 'transform 0.3s ease-in-out';
            container.style.transform = `translateX(${targetLeft}%)`;
            
            // After animation completes
            setTimeout(() => {
                // Update page
                currentPage = newPage;
                updatePagination();
                
                // Reset position instantly
                container.style.transition = 'none';
                container.style.transform = `translateX(${-targetLeft}%)`;
                
                // Trigger reflow
                container.offsetHeight;
                
                // Animate back to center
                container.style.transition = 'transform 0.3s ease-in-out';
                container.style.transform = 'translateX(0)';
                
                setTimeout(() => {
                    isAnimating = false;
                }, 300);
            }, 300);
        }

        // Update pagination display and navigation buttons
        function updatePagination() {
            console.log('Updating pagination...');
            
            const start = (currentPage - 1) * itemsPerPage;
            const end = Math.min(start + itemsPerPage, filteredReclamations.length);
            
            // Update showing count
            document.getElementById('showing-count').textContent = 
                `${start + 1}-${end} of ${filteredReclamations.length}`;
            
            // Update navigation buttons
            document.getElementById('prev-page').disabled = currentPage === 1;
            document.getElementById('next-page').disabled = end >= filteredReclamations.length;
            
            // Show/hide rows based on current page
            filteredReclamations.forEach((row, index) => {
                if (index >= start && index < end) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
            
            console.log(`Showing items ${start + 1} to ${end} of ${filteredReclamations.length}`);
        }

        // Apply filters to reclamations
        function applyFilters() {
            console.log('Applying filters...');
            
            const dateFilter = document.getElementById('dateFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const priorityFilter = document.getElementById('priorityFilter').value;
            const searchTerm = document.getElementById('searchFilter').value.toLowerCase();
            
            const rows = document.querySelectorAll('.reclamation-row');
            filteredReclamations = Array.from(rows).filter(row => {
                // Get cell values
                const type = row.children[2].textContent.trim();
                const date = new Date(row.children[3].textContent.trim());
                const status = row.getAttribute('data-state');
                const priority = row.children[6].textContent.trim().toLowerCase();
                const searchContent = Array.from(row.children).map(cell => cell.textContent.toLowerCase()).join(' ');
                
                // Date filtering
                let passesDateFilter = true;
                if (dateFilter !== 'all') {
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    
                    const dateOnly = new Date(date);
                    dateOnly.setHours(0, 0, 0, 0);
                    
                    switch (dateFilter) {
                        case 'today':
                            passesDateFilter = dateOnly.getTime() === today.getTime();
                            break;
                        case 'week':
                            const weekStart = new Date(today);
                            weekStart.setDate(today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1));
                            const weekEnd = new Date(weekStart);
                            weekEnd.setDate(weekStart.getDate() + 6);
                            passesDateFilter = dateOnly >= weekStart && dateOnly <= weekEnd;
                            break;
                        case 'month':
                            passesDateFilter = date.getMonth() === today.getMonth() && 
                                            date.getFullYear() === today.getFullYear();
                            break;
                        case 'year':
                            passesDateFilter = date.getFullYear() === today.getFullYear();
                            break;
                    }
                }
                
                // Apply all filters
                return passesDateFilter &&
                    (typeFilter === 'all' || type === typeFilter) &&
                    (statusFilter === 'all' || status === statusFilter) &&
                    (priorityFilter === 'all' || priority === priorityFilter.toLowerCase()) &&
                    (!searchTerm || searchContent.includes(searchTerm));
            });
            
            // Reset to first page and update display
            currentPage = 1;
            updatePagination();
            
            console.log(`Found ${filteredReclamations.length} matching reclamations`);
        }

        // Handle state toggle with SweetAlert2 confirmation
        async function handleStateToggle(e) {
            e.preventDefault();
            console.log('State toggle clicked');
            
            const button = e.currentTarget;
            const reclamationId = button.dataset.id;
            const isResolved = button.classList.contains('unmark-resolved-btn');
            
            // Show confirmation dialog
            const result = await Swal.fire({
                title: isResolved ? 'Unmark as Resolved?' : 'Mark as Resolved?',
                text: isResolved ? 
                    'Are you sure you want to mark this reclamation as pending?' :
                    'Are you sure you want to mark this reclamation as resolved?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: isResolved ? '#ffc107' : '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, proceed',
                cancelButtonText: 'Cancel'
            });
            
            if (!result.isConfirmed) return;
            
            console.log(`Toggling state for reclamation ${reclamationId}`);
            
            try {
                const response = await fetch(`/admin/reclamations/${reclamationId}/toggle-state`, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                
                const data = await response.json();
                console.log('Response:', data);
                
                // Update UI
                const row = button.closest('tr');
                const badge = row.querySelector('.badge');
                
                if (data.success) {
                    // Update badge
                    badge.className = `badge ${data.newState ? 'bg-success' : 'bg-warning'}`;
                    badge.textContent = data.newState ? 'Resolved' : 'Pending';
                    
                    // Update button
                    if (data.newState) {
                        button.className = 'btn btn-sm btn-warning unmark-resolved-btn';
                        button.innerHTML = '<i class="bi bi-x-circle-fill me-1"></i> Unmark';
                    } else {
                        button.className = 'btn btn-sm btn-success mark-resolved-btn';
                        button.innerHTML = '<i class="bi bi-check-circle-fill me-1"></i> Mark Resolved';
                    }
                    
                    // Update row data state
                    row.setAttribute('data-state', data.newState ? 'resolved' : 'pending');
                    
                    // Show success message
                    Swal.fire({
                        title: 'Success!',
                        text: data.message,
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    
                    // Reapply filters to update the view
                    applyFilters();
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to update the reclamation status. Please try again.',
                    icon: 'error'
                });
            }
        }

        // Function to show large photo in modal
        function showLargePhoto(imgElement) {
            const photoUrl = imgElement.src;
            Swal.fire({
                imageUrl: photoUrl,
                imageAlt: 'Reclamation Photo',
                width: '40%',
                padding: '4em',
                showConfirmButton: false,
                showCloseButton: true
            });
        }
    </script>
    {% endblock %}
  </body>
</html>
