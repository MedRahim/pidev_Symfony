{% extends 'admin/reclamation/base.html.twig' %}

{% block title %}Admin Reclamations{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // Your index-specific JavaScript here
        document.addEventListener('DOMContentLoaded', function() {
            // Any additional initialization specific to the index page
            console.log('Index page initialized');
        });
    </script>
{% endblock %}

{% block body %}
<style>
    :root {
        --primary: #4e73df;
        --secondary: #858796;
        --success: #1cc88a;
        --info: #36b9cc;
        --warning: #f6c23e;
        --danger: #e74a3b;
        --light: #f8f9fc;
        --dark: #5a5c69;
        --card-radius: 16px;
        --shadow: 0 4px 24px rgba(80, 80, 120, 0.13);
    }
    body, .container-fluid, .container {
        background: linear-gradient(135deg, #f8f9fc 0%, #eaecf4 100%) !important;
        font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
    }
    .container {
        max-width: 1400px;
    }
    h1, h2, h5, .card-title {
        font-family: 'Segoe UI', 'Roboto', Arial, sans-serif;
        font-weight: 700;
        color: var(--primary);
    }
    /* Stat Cards */
    .stat-card-blue {
        background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
        border-radius: 15px;
        color: #fff;
    }
    .stat-card-yellow {
        background: linear-gradient(135deg, #f6c23e 0%, #dda20a 100%);
        border-radius: 15px;
        color: #fff;
    }
    .stat-card-green {
        background: linear-gradient(135deg, #1cc88a 0%, #13855c 100%);
        border-radius: 15px;
        color: #fff;
    }
    .stat-card-cyan {
        background: linear-gradient(135deg, #36b9cc 0%, #258391 100%);
        border-radius: 15px;
        color: #fff;
    }
    .stat-card-title {
        color: rgba(255, 255, 255, 0.9);
        font-weight: 500;
        font-size: 1.1rem;
        letter-spacing: 0.5px;
        opacity: 0.85;
    }
    .stat-card-value {
        color: #ffffff;
        font-weight: 600;
        font-size: 2.2rem;
        margin-bottom: 0.3rem;
    }
    .stat-card-text {
        color: rgba(255, 255, 255, 0.8);
        font-size: 0.95rem;
        opacity: 0.9;
    }
    /* Card Styles & Hover */
    .card {
        border-radius: var(--card-radius) !important;
        box-shadow: var(--shadow);
        border: none;
        transition: all 0.3s ease;
        overflow: hidden;
    }
    .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1) !important;
    }
    .card.shadow-sm {
        box-shadow: 0 .125rem .25rem rgba(0,0,0,.075) !important;
    }
    .card.shadow-sm:hover {
        transform: none;
    }
    .card-header {
        background: var(--light);
        border-bottom: 1px solid #e3e6f0;
        font-weight: 600;
        color: var(--primary);
        border-radius: var(--card-radius) var(--card-radius) 0 0 !important;
        text-align: left;
    }
    .card-footer {
        border-radius: 0 0 var(--card-radius) var(--card-radius) !important;
        background: var(--light) !important;
        border-top: 1px solid #e3e6f0;
    }
    /* Table Styles & Hover */
    .table {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        overflow: hidden;
        box-shadow: var(--shadow);
        margin-bottom: 1.5rem;
    }
    .table thead th {
        background: rgba(255, 255, 255, 0.8);
        border-bottom: 2px solid #e3e6f0;
        color: #4e73df;
        font-weight: 600;
        letter-spacing: 0.7px;
    }
    .table tbody tr.reclamation-row {
        transition: all 0.2s ease;
        cursor: pointer !important;
    }
    .table tbody tr.reclamation-row:hover {
        background: rgba(78, 115, 223, 0.05);
    }
    .table tbody tr {
        transition: background 0.15s;
    }
    .table tbody tr:hover {
        background: #e9ecef;
    }
    .table td, .table th {
        vertical-align: middle !important;
        padding: 0.85rem 1rem;
    }
    /* Badge Styles */
    .badge {
        padding: 0.5em 0.8em;
        font-weight: 500;
        border-radius: 10px;
    }
    .badge.bg-success {
        background: linear-gradient(135deg, #1cc88a 0%, #13855c 100%) !important;
    }
    .badge.bg-warning {
        background: linear-gradient(135deg, #f6c23e 0%, #dda20a 100%) !important;
    }
    /* Button Styles & Hover */
    .btn, .btn-group .btn {
        border-radius: 10px !important;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    .btn:hover {
        transform: translateY(-2px);
    }
    .btn-success {
        background: linear-gradient(135deg, #1cc88a 0%, #13855c 100%);
        border: none;
        color: white;
    }
    .btn-warning {
        background: linear-gradient(135deg, #f6c23e 0%, #dda20a 100%);
        border: none;
        color: white;
    }
    .btn-primary {
        background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
        border: none;
    }
    .btn-outline-warning {
        color: var(--warning);
        border-color: var(--warning);
    }
    .btn-outline-warning:hover {
        background: var(--warning);
        color: #fff;
    }
    .btn-outline-success {
        color: var(--success);
        border-color: var(--success);
    }
    .btn-outline-success:hover {
        background: var(--success);
        color: #fff;
    }
    .btn-outline-primary {
        color: var(--primary);
        border-color: var(--primary);
    }
    .btn-outline-primary:hover {
        background: var(--primary);
        color: #fff;
    }
    /* Photo Preview Styles */
    .photo-preview-container {
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .photo-thumbnail {
        width: 40px;
        height: 40px;
        object-fit: cover;
        border-radius: 5px;
        cursor: pointer;
        transition: transform 0.2s;
    }
    .photo-thumbnail:hover {
        transform: scale(1.2);
    }
    .photo-preview-large {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 20px;
        max-width: 400px;
        height: 300px;
        max-height: 300px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 0 20px rgba(0,0,0,0.2);
        display: none;
        overflow: hidden;
        z-index: 1050;
    }
    .photo-preview-large img {
        width: 100%;
        height: 100%;
        object-fit: contain;
    }
    .photo-preview-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7);
        display: none;
        z-index: 1040;
    }
    .photo-close-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        background: rgba(0, 0, 0, 0.5);
        border: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 1051;
        padding: 0;
    }
    .photo-close-btn i {
        color: white;
        font-size: 10px;
    }
    .photo-close-btn:hover {
        background: rgba(0, 0, 0, 0.7);
    }
    /* Filter Button States */
    .filter-btn[data-state="pending"].active {
        background: linear-gradient(135deg, #f6c23e 0%, #dda20a 100%);
    }
    .filter-btn[data-state="resolved"].active {
        background: linear-gradient(135deg, #1cc88a 0%, #13855c 100%);
    }
    .filter-btn[data-state="all"].active {
        background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
    }
    .card-bodyy {
        height: 300px !important;
        min-height: 15px !important;
    }
    /* Action Buttons */
    .action-btn {
        cursor: pointer !important;
    }
    /* Chart Styles */
    .card-body canvas {
        width: 100% !important;
    }
    /* Reclamation List Styles */
    .reclamation-list-body {
        padding: 1.5rem;
        transition: all 0.3s ease;
        border: none;
        overflow: hidden;
    }
    .reclamation-list-body .table-responsive {
        margin: -1.5rem;
    }
    /* Forms */
    .form-select, .form-control {
        border-radius: 8px;
        border: 1px solid #d1d3e2;
        transition: border-color 0.2s;
    }
    .form-select:focus, .form-control:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 0.15rem rgba(78, 115, 223, 0.20);
    }
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .stat-card-title, .stat-card-value, .stat-card-text {
            text-align: center;
        }
        .card-header, .card-footer {
            text-align: center;
        }
        .btn-group {
            flex-direction: column;
            gap: 0.5rem;
        }
    }
    /* Add these styles to your existing styles */
    .response-card .card-body {
        padding: 0.75rem 1rem;
    }

    .response-actions .btn {
        padding: 0.25rem 0.5rem;
        line-height: 1;
    }

    .response-actions .btn i {
        font-size: 0.875rem;
    }

    .response-content {
        flex: 1;
        min-width: 0;
        padding-right: 1rem;
    }

    .response-actions {
        white-space: nowrap;
    }
</style>
 {{ parent() }}
    {% set locale = 'fr' %}
    {% set months = {
        1: 'Janvier',
        2: 'Février',
        3: 'Mars',
        4: 'Avril',
        5: 'Mai',
        6: 'Juin',
        7: 'Juillet',
        8: 'Août',
        9: 'Septembre',
        10: 'Octobre',
        11: 'Novembre',
        12: 'Décembre'
    } %}
    <div class="container-fluid px-4 py-4">
        <div class="container">
            <h1 class="mb-4 text-primary">Admin Dashboard</h1>

            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card shadow-lg border-0 stat-card-blue">
                        <div class="card-body">
                            <h5 class="card-title stat-card-title">Total Réclamations</h5>
                            <h2 class="mb-0 stat-card-value">{{ reclamations|length }}</h2>
                            <p class="card-text stat-card-text"><small>Depuis le début</small></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card shadow-lg border-0 stat-card-yellow">
                        <div class="card-body">
                            <h5 class="card-title stat-card-title">En Attente</h5>
                            <h2 class="mb-0 stat-card-value">{{ reclamations|filter(rec => not rec.state)|length }}</h2>
                            <p class="card-text stat-card-text"><small>À traiter</small></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card shadow-lg border-0 stat-card-green">
                        <div class="card-body">
                            <h5 class="card-title stat-card-title">Résolues</h5>
                            <h2 class="mb-0 stat-card-value">{{ reclamations|filter(rec => rec.state)|length }}</h2>
                            <p class="card-text stat-card-text"><small>Cette année</small></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card shadow-lg border-0" style="background: linear-gradient(135deg, #36b9cc 0%, #258391 100%); border-radius: 15px;">
                        <div class="card-body">
                            <h5 class="card-title" style="color: rgba(255, 255, 255, 0.9); font-weight: 500;">Taux de Résolution</h5>
                            <h2 class="mb-0" style="color: #ffffff; font-weight: 600;">
                                {% if reclamations|length > 0 %}
                                    {{ ((reclamations|filter(rec => rec.state)|length / reclamations|length) * 100)|number_format(1) }}%
                                {% else %}
                                    0%
                                {% endif %}
                            </h2>
                            <p class="card-text" style="color: rgba(255, 255, 255, 0.8);"><small>Global</small></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Advanced Filters -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Filtres Avancés</h5>
                </div>
                <div class="card-body">
                    <br>
                    <div class="row g-3 align-items-end">
                        <div class="col">
                            <label for="dateFilter" class="form-label">Date</label>
                            <select class="form-select form-select-sm" id="dateFilter">
                                <option value="all">Toutes les dates</option>
                                <option value="today">Aujourd'hui</option>
                                <option value="week">Cette semaine</option>
                                <option value="month">Ce mois</option>
                                <option value="year">Cette année</option>
                            </select>
                        </div>
                        <div class="col">
                            <label for="typeFilter" class="form-label">Type</label>
                            <select class="form-select form-select-sm" id="typeFilter">
                                <option value="all">Tous les types</option>
                                {% set types = [] %}
                                {% for rec in reclamations %}
                                    {% if rec.type not in types %}
                                        {% set types = types|merge([rec.type]) %}
                                        <option value="{{ rec.type }}">{{ rec.type }}</option>
                                    {% endif %}
                                {% endfor %}
                            </select>
                        </div>
                        <div class="col">
                            <label for="statusFilter" class="form-label">Status</label>
                            <select class="form-select form-select-sm" id="statusFilter">
                                <option value="all">Tous les status</option>
                                <option value="pending">En attente</option>
                                <option value="resolved">Résolues</option>
                            </select>
                        </div>
                        <div class="col">
                            <label for="priorityFilter" class="form-label">Priorité</label>
                            <select class="form-select form-select-sm" id="priorityFilter">
                                <option value="all">Toutes les priorités</option>
                                {% set priorities = [] %}
                                {% for rec in reclamations %}
                                    {% if rec.priorite not in priorities %}
                                        {% set priorities = priorities|merge([rec.priorite]) %}
                                        <option value="{{ rec.priorite }}">{{ rec.priorite|capitalize }}</option>
                                    {% endif %}
                                {% endfor %}
                            </select>
                        </div>
                        <div class="col">
                            <label for="searchFilter" class="form-label">Recherche</label>
                            <input type="text" class="form-control form-control-sm" id="searchFilter" placeholder="Rechercher...">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Pagination Navigation -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="pagination d-flex align-items-center">
                    <button id="prev-page" class="btn btn-sm btn-outline-primary me-2">
                        <i class="bi bi-chevron-left"></i> Previous
                    </button>
                    <span id="showing-count" class="text-muted small">0-0 of 0</span>
                    <button id="next-page" class="btn btn-sm btn-outline-primary ms-2">
                        Next <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            </div>

            <!-- Table with Slide Container -->
            <div class="slide-container">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover align-middle">
                                <thead class="table-light">
                                    <tr>
                                        <th>ID</th>
                                        <th>Client</th>
                                        <th>Type</th>
                                        <th>Date</th>
                                        <th>Status</th>
                                        <th>Photo</th>
                                        <th>Priorité</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="reclamations-table-body">
                                    {% for rec in reclamations|sort((a, b) => b.datee <=> a.datee) %}
                                        <tr class="reclamation-row" data-state="{{ rec.state ? 'resolved' : 'pending' }}">
                                            <td class="clickable-cell" data-bs-toggle="collapse" data-bs-target="#desc-{{ rec.id }}">{{ rec.id }}</td>
                                            <td class="clickable-cell" data-bs-toggle="collapse" data-bs-target="#desc-{{ rec.id }}">{{ rec.clientId }}</td>
                                            <td class="clickable-cell" data-bs-toggle="collapse" data-bs-target="#desc-{{ rec.id }}">{{ rec.type }}</td>
                                            <td class="clickable-cell" data-bs-toggle="collapse" data-bs-target="#desc-{{ rec.id }}">{{ rec.datee|date('Y-m-d') }}</td>
                                            <td class="clickable-cell" data-bs-toggle="collapse" data-bs-target="#desc-{{ rec.id }}">
                                                <span class="badge {{ rec.state ? 'bg-success' : 'bg-warning' }}">
                                                    {{ rec.state ? 'Resolved' : 'Pending' }}
                                                </span>
                                            </td>
                                            <td>
                                                {% if rec.photo %}
                                                    <div class="photo-preview-container">
                                                        <img src="{{ asset('uploads/photos/' ~ rec.photo) }}" 
                                                             alt="Reclamation Photo" 
                                                             class="photo-thumbnail"
                                                             data-photo-id="{{ rec.id }}"
                                                             onclick="showLargePhoto(this)">
                                                    </div>
                                                {% else %}
                                                    <span class="text-muted">No photo</span>
                                                {% endif %}
                                            </td>
                                            <td>{{ rec.priorite|capitalize }}</td>
                                            <td>
                                                {% if not rec.state %}
                                                    <button class="btn btn-sm btn-success mark-resolved-btn me-1" data-id="{{ rec.id }}">
                                                        <i class="bi bi-check-circle-fill me-1"></i> Mark Resolved
                                                    </button>
                                                {% else %}
                                                    <button class="btn btn-sm btn-warning unmark-resolved-btn me-1" data-id="{{ rec.id }}">
                                                        <i class="bi bi-x-circle-fill me-1"></i> Unmark
                                                    </button>
                                                {% endif %}
                                                <button class="btn btn-sm btn-primary" onclick="showReplyForm('{{ rec.id }}')">
                                                    <i class="bi bi-reply me-1"></i> Reply
                                                </button>
                                            </td>
                                        </tr>
                                        <tr id="desc-{{ rec.id }}" class="collapse">
                                            <td colspan="8">
                                                <div class="p-3">
                                                    <div class="mb-4">
                                                        <h6 class="mb-2">Description:</h6>
                                                        <p class="mb-3">{{ rec.description }}</p>
                                                    </div>

                                                    <!-- Responses Section -->
                                                    <div class="responses-section">
                                                        <h6 class="mb-3">
                                                            <i class="bi bi-chat-dots me-2"></i>Responses
                                                        </h6>

                                                        <!-- Reply Form (Initially Hidden) -->
                                                        <div id="replyForm-{{ rec.id }}" class="reply-form mb-3" style="display: none;">
                                                            <form onsubmit="submitReply(event, '{{ rec.id }}')" class="card">
                                                                <div class="card-body">
                                                                    <textarea class="form-control mb-3" 
                                                                              id="replyMessage-{{ rec.id }}" 
                                                                              rows="3" 
                                                                              placeholder="Type your response here..."></textarea>
                                                                    <div class="d-flex justify-content-end gap-2">
                                                                        <button type="button" 
                                                                                class="btn btn-light" 
                                                                                onclick="hideReplyForm('{{ rec.id }}')">Cancel</button>
                                                                        <button type="submit" class="btn btn-primary">
                                                                            <i class="bi bi-send me-1"></i> Send Reply
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </form>
                                                        </div>

                                                        <!-- Existing Responses -->
                                                        <div class="responses-list" id="responsesList-{{ rec.id }}">
                                                            {% for response in rec.reponses|sort((a, b) => b.datee <=> a.datee) %}
                                                                <div class="card mb-2 response-card">
                                                                    <div class="card-body py-2 px-3">
                                                                        <div class="d-flex justify-content-between align-items-start">
                                                                            <div class="response-content flex-grow-1">
                                                                                <p class="mb-1">{{ response.message }}</p>
                                                                                <small class="text-muted">
                                                                                    {{ response.datee|date('Y-m-d H:i:s') }}
                                                                                </small>
                                                                            </div>
                                                                            <div class="response-actions ms-3 d-flex gap-1">
                                                                                <button class="btn btn-sm btn-outline-primary"
                                                                                        onclick="editResponse('{{ response.id }}', '{{ response.message|e('js') }}')"
                                                                                        title="Edit Response">
                                                                                    <i class="bi bi-pencil">Edit</i>
                                                                                </button>
                                                                                <button class="btn btn-sm btn-outline-danger"
                                                                                        onclick="deleteResponse('{{ response.id }}')"
                                                                                        title="Delete Response">
                                                                                    <i class="bi bi-trash">Delete</i>
                                                                                </button>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            {% else %}
                                                                <p class="text-muted">No responses yet.</p>
                                                            {% endfor %}
                                                        </div>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
    const itemsPerPage = 10;
    let currentPage = 1;
    let filteredReclamations = [];
    
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    const showingCount = document.getElementById('showing-count');
    
    // Store all reclamations in arrays
    const allReclamations = Array.from(document.querySelectorAll('.reclamation-row'));
    const allDescRows = Array.from(document.querySelectorAll('.collapse'));

    // Filter elements
    const dateFilter = document.getElementById('dateFilter');
    const typeFilter = document.getElementById('typeFilter');
    const statusFilter = document.getElementById('statusFilter');
    const priorityFilter = document.getElementById('priorityFilter');
    const searchFilter = document.getElementById('searchFilter');

    function applyFilters() {
        const dateValue = dateFilter.value;
        const typeValue = typeFilter.value;
        const statusValue = statusFilter.value;
        const priorityValue = priorityFilter.value.toLowerCase();
        const searchValue = searchFilter.value.toLowerCase();

        // Reset filtered reclamations
        filteredReclamations = allReclamations.filter(row => {
            const rowDateStr = row.querySelector('td:nth-child(4)').textContent;
            const rowType = row.querySelector('td:nth-child(3)').textContent;
            const rowPriority = row.querySelector('td:nth-child(7)').textContent.toLowerCase().trim();
            const rowText = row.textContent.toLowerCase();
            const rowState = row.dataset.state;

            let show = true;

            // Apply status filter
            if (statusValue !== 'all') {
                if (statusValue === 'pending' && rowState === 'resolved') {
                    show = false;
                } else if (statusValue === 'resolved' && rowState === 'pending') {
                show = false;
                }
            }

            // Apply date filter
            if (show && dateValue !== 'all') {
                const [year, month, day] = rowDateStr.split('-').map(Number);
                const rowDate = new Date(Date.UTC(year, month - 1, day));
                const now = new Date();
                const today = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));
                
                switch(dateValue) {
                    case 'today':
                        show = rowDate.getUTCFullYear() === today.getUTCFullYear() &&
                               rowDate.getUTCMonth() === today.getUTCMonth() &&
                               rowDate.getUTCDate() === today.getUTCDate();
                        break;
                    case 'week':
                        const currentDay = today.getUTCDay();
                        const weekStart = new Date(today);
                        weekStart.setUTCDate(today.getUTCDate() - (currentDay === 0 ? 6 : currentDay - 1));
                        weekStart.setUTCHours(0, 0, 0, 0);
                        
                        const weekEnd = new Date(weekStart);
                        weekEnd.setUTCDate(weekStart.getUTCDate() + 6);
                        weekEnd.setUTCHours(23, 59, 59, 999);
                        
                        const rowDateStart = new Date(rowDate);
                        rowDateStart.setUTCHours(0, 0, 0, 0);
                        
                        show = rowDateStart >= weekStart && rowDateStart <= weekEnd;
                        break;
                    case 'month':
                        show = rowDate.getUTCMonth() === today.getUTCMonth() && 
                               rowDate.getUTCFullYear() === today.getUTCFullYear();
                        break;
                    case 'year':
                        show = rowDate.getUTCFullYear() === today.getUTCFullYear();
                        break;
                }
            }

            // Apply type filter
            if (show && typeValue !== 'all' && rowType !== typeValue) {
                show = false;
            }
            
            // Apply priority filter
            if (show && priorityValue !== 'all' && rowPriority !== priorityValue) {
                show = false;
            }

            // Apply search filter
            if (show && searchValue && !rowText.includes(searchValue)) {
                show = false;
            }

            return show;
        });

        // Reset to first page when filters change
        currentPage = 1;
        updatePagination();
    }

    function updatePagination() {
        const totalItems = filteredReclamations.length;
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        
        const start = (currentPage - 1) * itemsPerPage + 1;
        const end = Math.min(currentPage * itemsPerPage, totalItems);
        showingCount.textContent = `${start}-${end} of ${totalItems}`;

        // Update button states
        prevButton.disabled = currentPage === 1;
        nextButton.disabled = currentPage === totalPages;
        
        // Hide all rows first
        allReclamations.forEach(row => row.style.display = 'none');
        allDescRows.forEach(row => row.style.display = 'none');
        
        // Show only filtered rows for current page
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
        
        for (let i = startIndex; i < endIndex; i++) {
            if (filteredReclamations[i]) {
                filteredReclamations[i].style.display = '';
                // Show description row if it exists
                const descRow = document.getElementById(`desc-${filteredReclamations[i].querySelector('td').textContent}`);
                if (descRow) {
                    descRow.style.display = '';
                        }
                    }
        }
    }

    // Add event listeners for filters
    [dateFilter, typeFilter, statusFilter, priorityFilter].forEach(filter => {
        filter.addEventListener('change', applyFilters);
    });

    searchFilter.addEventListener('input', applyFilters);
    
    // Add click event listeners for pagination
    if (prevButton) {
        prevButton.addEventListener('click', function() {
            if (currentPage > 1) {
                currentPage--;
                updatePagination();
            }
        });
    }
    
    if (nextButton) {
        nextButton.addEventListener('click', function() {
            if (currentPage < Math.ceil(filteredReclamations.length / itemsPerPage)) {
                currentPage++;
                updatePagination();
            }
        });
    }
    
    // Initial setup
    filteredReclamations = allReclamations;
    updatePagination();
}); 
    </script>

    <script>
    function showReplyForm(reclamationId) {
        document.getElementById(`replyForm-${reclamationId}`).style.display = 'block';
    }

    function hideReplyForm(reclamationId) {
        document.getElementById(`replyForm-${reclamationId}`).style.display = 'none';
    }

    async function submitReply(event, reclamationId) {
        event.preventDefault();
        const messageElement = document.getElementById(`replyMessage-${reclamationId}`);
        const message = messageElement.value.trim();
        
        if (!message) {
            Swal.fire({
                title: 'Error!',
                text: 'Please enter a response message.',
                icon: 'error'
            });
            return;
        }

        try {
            const response = await fetch(`/reponse/new/${reclamationId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ 
                    message: message,
                    _token: '{{ csrf_token('reponse_new') }}'
                })
            });

            const data = await response.json();

            if (data.success) {
                // Clear form and hide it
                messageElement.value = '';
                hideReplyForm(reclamationId);
                
                // Refresh the page to show the new response
                window.location.reload();
            } else {
                throw new Error(data.message || 'Failed to submit response');
            }
        } catch (error) {
            Swal.fire({
                title: 'Error!',
                text: error.message,
                icon: 'error'
            });
        }
    }

    async function editResponse(responseId, currentMessage) {
        const { value: newMessage } = await Swal.fire({
            title: 'Edit Response',
            input: 'textarea',
            inputValue: currentMessage,
            inputPlaceholder: 'Type your response here...',
            showCancelButton: true,
            confirmButtonText: 'Save',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
                if (!value.trim()) {
                    return 'Please enter a response message';
                }
            }
        });

        if (newMessage) {
            try {
                const response = await fetch(`/reponse/${responseId}/edit`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ 
                        message: newMessage,
                        _token: '{{ csrf_token('edit_reponse') }}'
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Refresh the page to show the updated response
                    window.location.reload();
                } else {
                    throw new Error(data.message || 'Failed to update response');
                }
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error'
                });
            }
        }
    }

    async function deleteResponse(responseId) {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: 'This response will be permanently deleted.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch(`/reponse/${responseId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        _token: '{{ csrf_token('delete') }}'
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Refresh the page to show the deletion
                    window.location.reload();
                } else {
                    throw new Error(data.message || 'Failed to delete response');
                }
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: error.message,
                    icon: 'error'
                });
            }
        }
    }
    </script>
{% endblock %}
